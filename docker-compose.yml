version: "3.8"

networks:
  custom_network:
    driver: bridge

services:
  # DATABASES

  postgres:
    container_name: postgres
    image: postgres:17
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /database/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - /database/postgresql/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - /database/postgresql/pg_hba.conf:/etc/postgresql/common/pg_hba.conf
    networks:
      - custom_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - custom_network

  # UTILS

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "${PROXY_PORT}:80"
    restart: always
    volumes:
      - ./utils/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/client/build:/usr/share/nginx/html
    depends_on:
      - client
      - api-news
      - api-nlp
    networks:
      - custom_network

  rabbitmq:
    container_name: rabbitmq
    build:
      context: /utils/rabbitmq
      dockerfile: Dockerfile
    ports:
      - "${RABBITMQ_AMQP_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - custom_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 15s
      timeout: 10s
      retries: 5

  testing-pytest:
    container_name: testing-pytest
    build:
      context: /utils/testing/pytest
      dockerfile: Dockerfile
    volumes:
      - ./server/api:/app/api:cached
      - ./server/services:/app/services:cached
    working_dir: /app
    command: pytest --junitxml=results/test-results.xml
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - custom_network

  lint-flake8:
    container_name: lint-flake8
    build:
      context: /utils/lints/flake8
      dockerfile: Dockerfile
    volumes:
      - ./server/api:/app/api:cached
      - ./server/services:/app/services:cached
    working_dir: /app
    command: flake8 api services
    networks:
      - custom_network

  # APIS

  api-news:
    container_name: api-news
    build:
      context: /server/api/news
      dockerfile: Dockerfile
    ports:
      - "${API_NEWS_PORT:-8010}:8010"
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_NAME: ${POSTGRES_NAME}
    networks:
      - custom_network

  api-nlp:
    container_name: api-nlp
    build:
      context: /server/api/nlp
      dockerfile: Dockerfile
    ports:
      - "${API_NLP_PORT:-8011}:8011"
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_NAME: ${POSTGRES_NAME}
    networks:
      - custom_network

  # SERVICES

  # FRONTEND

  client:
    container_name: client
    build:
      context: ./frontend/client
      dockerfile: Dockerfile
    ports:
      - "${CLIENT_PORT}:3000"
    depends_on:
      - api-news
      - api-nlp
    networks:
      - custom_network

# VOLUMES

volumes:
  clickhouse_data:
  postgres_data:
  pgadmin_data:
